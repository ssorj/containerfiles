diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index eba042e6..f7744487 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -36,6 +36,12 @@ else()
   set(CONNECT_CONFIG_SRC src/connect_config_dummy.cpp)
 endif()
 
+find_package(opentelemetry-cpp CONFIG REQUIRED)
+option(ENABLE_OPENTELEMETRY_CPP "Use OpenTelemetry C++ for distributed tracing", ${OPENTELEMETRY_CPP_FOUND})
+if (ENABLE_OPENTELEMETRY_CPP)
+  include_directories(${OPENTELEMETRY_CPP_INCLUDE_DIRS})
+endif ()
+
 list(APPEND PLATFORM_LIBS Threads::Threads)
 
 set(CXX_EXAMPLE_FLAGS "${CXX_WARNING_FLAGS} ${CXX_STANDARD}")
@@ -116,7 +122,13 @@ if(BUILD_STATIC_LIBS)
   set(STATIC_LIBS qpid-proton-cpp-static)
 endif(BUILD_STATIC_LIBS)
 
-target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
+# if (ENABLE_OPENTELEMETRY_CPP)
+#   target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS} ${OPENTELEMETRY_CPP_LIBS})
+# else ()
+#   target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
+# endif ()
+
+target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS} ${OPENTELEMETRY_CPP_LIBS})
 
 set_target_properties (
   qpid-proton-cpp
diff --git a/cpp/src/container.cpp b/cpp/src/container.cpp
index 494ece81..3c3e5073 100644
--- a/cpp/src/container.cpp
+++ b/cpp/src/container.cpp
@@ -29,6 +29,8 @@
 
 #include "proactor_container_impl.hpp"
 
+#include "opentelemetry/trace/provider.h"
+
 namespace proton {
 
 container::container(messaging_handler& h, const std::string& id) :
@@ -42,6 +44,7 @@ container::container() :
 container::~container() {}
 
 returned<connection> container::connect(const std::string &url) {
+    auto provider = opentelemetry::trace::Provider::GetTracerProvider();
     return connect(url, connection_options());
 }
 
